// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: FC_Route_Message.proto
// Protobuf C++ Version: 5.29.3

#ifndef FC_5fRoute_5fMessage_2eproto_2epb_2eh
#define FC_5fRoute_5fMessage_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_FC_5fRoute_5fMessage_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_FC_5fRoute_5fMessage_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_FC_5fRoute_5fMessage_2eproto;
namespace fc {
class RouteAnnounce;
struct RouteAnnounceDefaultTypeInternal;
extern RouteAnnounceDefaultTypeInternal _RouteAnnounce_default_instance_;
class RoutePoint;
struct RoutePointDefaultTypeInternal;
extern RoutePointDefaultTypeInternal _RoutePoint_default_instance_;
}  // namespace fc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace fc {
enum RouteAnnounce_RouteType : int {
  RouteAnnounce_RouteType_ROUTE = 0,
  RouteAnnounce_RouteType_POSITION = 1,
  RouteAnnounce_RouteType_RouteAnnounce_RouteType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RouteAnnounce_RouteType_RouteAnnounce_RouteType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RouteAnnounce_RouteType_IsValid(int value);
extern const uint32_t RouteAnnounce_RouteType_internal_data_[];
constexpr RouteAnnounce_RouteType RouteAnnounce_RouteType_RouteType_MIN = static_cast<RouteAnnounce_RouteType>(0);
constexpr RouteAnnounce_RouteType RouteAnnounce_RouteType_RouteType_MAX = static_cast<RouteAnnounce_RouteType>(1);
constexpr int RouteAnnounce_RouteType_RouteType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
RouteAnnounce_RouteType_descriptor();
template <typename T>
const std::string& RouteAnnounce_RouteType_Name(T value) {
  static_assert(std::is_same<T, RouteAnnounce_RouteType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RouteType_Name().");
  return RouteAnnounce_RouteType_Name(static_cast<RouteAnnounce_RouteType>(value));
}
template <>
inline const std::string& RouteAnnounce_RouteType_Name(RouteAnnounce_RouteType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RouteAnnounce_RouteType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool RouteAnnounce_RouteType_Parse(absl::string_view name, RouteAnnounce_RouteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RouteAnnounce_RouteType>(
      RouteAnnounce_RouteType_descriptor(), name, value);
}
enum RouteType : int {
  ROUTE = 0,
  POSITION = 1,
  RouteType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RouteType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RouteType_IsValid(int value);
extern const uint32_t RouteType_internal_data_[];
constexpr RouteType RouteType_MIN = static_cast<RouteType>(0);
constexpr RouteType RouteType_MAX = static_cast<RouteType>(1);
constexpr int RouteType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
RouteType_descriptor();
template <typename T>
const std::string& RouteType_Name(T value) {
  static_assert(std::is_same<T, RouteType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RouteType_Name().");
  return RouteType_Name(static_cast<RouteType>(value));
}
template <>
inline const std::string& RouteType_Name(RouteType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RouteType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool RouteType_Parse(absl::string_view name, RouteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RouteType>(
      RouteType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RoutePoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fc.RoutePoint) */ {
 public:
  inline RoutePoint() : RoutePoint(nullptr) {}
  ~RoutePoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RoutePoint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RoutePoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RoutePoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline RoutePoint(const RoutePoint& from) : RoutePoint(nullptr, from) {}
  inline RoutePoint(RoutePoint&& from) noexcept
      : RoutePoint(nullptr, std::move(from)) {}
  inline RoutePoint& operator=(const RoutePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutePoint& operator=(RoutePoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutePoint* internal_default_instance() {
    return reinterpret_cast<const RoutePoint*>(
        &_RoutePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RoutePoint& a, RoutePoint& b) { a.Swap(&b); }
  inline void Swap(RoutePoint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutePoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutePoint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RoutePoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoutePoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RoutePoint& from) { RoutePoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RoutePoint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fc.RoutePoint"; }

 protected:
  explicit RoutePoint(::google::protobuf::Arena* arena);
  RoutePoint(::google::protobuf::Arena* arena, const RoutePoint& from);
  RoutePoint(::google::protobuf::Arena* arena, RoutePoint&& from) noexcept
      : RoutePoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kSpeedFieldNumber = 4,
  };
  // double latitude = 1;
  void clear_latitude() ;
  double latitude() const;
  void set_latitude(double value);

  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);

  public:
  // double longitude = 2;
  void clear_longitude() ;
  double longitude() const;
  void set_longitude(double value);

  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);

  public:
  // int64 timestamp = 3;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // double speed = 4;
  void clear_speed() ;
  double speed() const;
  void set_speed(double value);

  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);

  public:
  // @@protoc_insertion_point(class_scope:fc.RoutePoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RoutePoint& from_msg);
    double latitude_;
    double longitude_;
    ::int64_t timestamp_;
    double speed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FC_5fRoute_5fMessage_2eproto;
};
// -------------------------------------------------------------------

class RouteAnnounce final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fc.RouteAnnounce) */ {
 public:
  inline RouteAnnounce() : RouteAnnounce(nullptr) {}
  ~RouteAnnounce() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RouteAnnounce* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RouteAnnounce));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RouteAnnounce(
      ::google::protobuf::internal::ConstantInitialized);

  inline RouteAnnounce(const RouteAnnounce& from) : RouteAnnounce(nullptr, from) {}
  inline RouteAnnounce(RouteAnnounce&& from) noexcept
      : RouteAnnounce(nullptr, std::move(from)) {}
  inline RouteAnnounce& operator=(const RouteAnnounce& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteAnnounce& operator=(RouteAnnounce&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteAnnounce& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteAnnounce* internal_default_instance() {
    return reinterpret_cast<const RouteAnnounce*>(
        &_RouteAnnounce_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RouteAnnounce& a, RouteAnnounce& b) { a.Swap(&b); }
  inline void Swap(RouteAnnounce* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteAnnounce* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteAnnounce* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RouteAnnounce>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RouteAnnounce& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RouteAnnounce& from) { RouteAnnounce::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RouteAnnounce* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fc.RouteAnnounce"; }

 protected:
  explicit RouteAnnounce(::google::protobuf::Arena* arena);
  RouteAnnounce(::google::protobuf::Arena* arena, const RouteAnnounce& from);
  RouteAnnounce(::google::protobuf::Arena* arena, RouteAnnounce&& from) noexcept
      : RouteAnnounce(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using RouteType = RouteAnnounce_RouteType;
  static constexpr RouteType ROUTE = RouteAnnounce_RouteType_ROUTE;
  static constexpr RouteType POSITION = RouteAnnounce_RouteType_POSITION;
  static inline bool RouteType_IsValid(int value) {
    return RouteAnnounce_RouteType_IsValid(value);
  }
  static constexpr RouteType RouteType_MIN = RouteAnnounce_RouteType_RouteType_MIN;
  static constexpr RouteType RouteType_MAX = RouteAnnounce_RouteType_RouteType_MAX;
  static constexpr int RouteType_ARRAYSIZE = RouteAnnounce_RouteType_RouteType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* RouteType_descriptor() {
    return RouteAnnounce_RouteType_descriptor();
  }
  template <typename T>
  static inline const std::string& RouteType_Name(T value) {
    return RouteAnnounce_RouteType_Name(value);
  }
  static inline bool RouteType_Parse(absl::string_view name, RouteType* value) {
    return RouteAnnounce_RouteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kPointsFieldNumber = 3,
    kRouteIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .fc.RoutePoint points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  ::fc::RoutePoint* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField<::fc::RoutePoint>* mutable_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::fc::RoutePoint>& _internal_points() const;
  ::google::protobuf::RepeatedPtrField<::fc::RoutePoint>* _internal_mutable_points();
  public:
  const ::fc::RoutePoint& points(int index) const;
  ::fc::RoutePoint* add_points();
  const ::google::protobuf::RepeatedPtrField<::fc::RoutePoint>& points() const;
  // string route_id = 1;
  void clear_route_id() ;
  const std::string& route_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_route_id(Arg_&& arg, Args_... args);
  std::string* mutable_route_id();
  PROTOBUF_NODISCARD std::string* release_route_id();
  void set_allocated_route_id(std::string* value);

  private:
  const std::string& _internal_route_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route_id(
      const std::string& value);
  std::string* _internal_mutable_route_id();

  public:
  // .fc.RouteAnnounce.RouteType type = 2;
  void clear_type() ;
  ::fc::RouteAnnounce_RouteType type() const;
  void set_type(::fc::RouteAnnounce_RouteType value);

  private:
  ::fc::RouteAnnounce_RouteType _internal_type() const;
  void _internal_set_type(::fc::RouteAnnounce_RouteType value);

  public:
  // @@protoc_insertion_point(class_scope:fc.RouteAnnounce)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      33, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RouteAnnounce& from_msg);
    ::google::protobuf::RepeatedPtrField< ::fc::RoutePoint > points_;
    ::google::protobuf::internal::ArenaStringPtr route_id_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FC_5fRoute_5fMessage_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RoutePoint

// double latitude = 1;
inline void RoutePoint::clear_latitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = 0;
}
inline double RoutePoint::latitude() const {
  // @@protoc_insertion_point(field_get:fc.RoutePoint.latitude)
  return _internal_latitude();
}
inline void RoutePoint::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:fc.RoutePoint.latitude)
}
inline double RoutePoint::_internal_latitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_;
}
inline void RoutePoint::_internal_set_latitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = value;
}

// double longitude = 2;
inline void RoutePoint::clear_longitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = 0;
}
inline double RoutePoint::longitude() const {
  // @@protoc_insertion_point(field_get:fc.RoutePoint.longitude)
  return _internal_longitude();
}
inline void RoutePoint::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:fc.RoutePoint.longitude)
}
inline double RoutePoint::_internal_longitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_;
}
inline void RoutePoint::_internal_set_longitude(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = value;
}

// int64 timestamp = 3;
inline void RoutePoint::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t RoutePoint::timestamp() const {
  // @@protoc_insertion_point(field_get:fc.RoutePoint.timestamp)
  return _internal_timestamp();
}
inline void RoutePoint::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fc.RoutePoint.timestamp)
}
inline ::int64_t RoutePoint::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void RoutePoint::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// double speed = 4;
inline void RoutePoint::clear_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = 0;
}
inline double RoutePoint::speed() const {
  // @@protoc_insertion_point(field_get:fc.RoutePoint.speed)
  return _internal_speed();
}
inline void RoutePoint::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:fc.RoutePoint.speed)
}
inline double RoutePoint::_internal_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_;
}
inline void RoutePoint::_internal_set_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = value;
}

// -------------------------------------------------------------------

// RouteAnnounce

// string route_id = 1;
inline void RouteAnnounce::clear_route_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.route_id_.ClearToEmpty();
}
inline const std::string& RouteAnnounce::route_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fc.RouteAnnounce.route_id)
  return _internal_route_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RouteAnnounce::set_route_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.route_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fc.RouteAnnounce.route_id)
}
inline std::string* RouteAnnounce::mutable_route_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_route_id();
  // @@protoc_insertion_point(field_mutable:fc.RouteAnnounce.route_id)
  return _s;
}
inline const std::string& RouteAnnounce::_internal_route_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.route_id_.Get();
}
inline void RouteAnnounce::_internal_set_route_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.route_id_.Set(value, GetArena());
}
inline std::string* RouteAnnounce::_internal_mutable_route_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.route_id_.Mutable( GetArena());
}
inline std::string* RouteAnnounce::release_route_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fc.RouteAnnounce.route_id)
  return _impl_.route_id_.Release();
}
inline void RouteAnnounce::set_allocated_route_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.route_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.route_id_.IsDefault()) {
    _impl_.route_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fc.RouteAnnounce.route_id)
}

// .fc.RouteAnnounce.RouteType type = 2;
inline void RouteAnnounce::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::fc::RouteAnnounce_RouteType RouteAnnounce::type() const {
  // @@protoc_insertion_point(field_get:fc.RouteAnnounce.type)
  return _internal_type();
}
inline void RouteAnnounce::set_type(::fc::RouteAnnounce_RouteType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:fc.RouteAnnounce.type)
}
inline ::fc::RouteAnnounce_RouteType RouteAnnounce::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fc::RouteAnnounce_RouteType>(_impl_.type_);
}
inline void RouteAnnounce::_internal_set_type(::fc::RouteAnnounce_RouteType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// repeated .fc.RoutePoint points = 3;
inline int RouteAnnounce::_internal_points_size() const {
  return _internal_points().size();
}
inline int RouteAnnounce::points_size() const {
  return _internal_points_size();
}
inline void RouteAnnounce::clear_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.points_.Clear();
}
inline ::fc::RoutePoint* RouteAnnounce::mutable_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fc.RouteAnnounce.points)
  return _internal_mutable_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fc::RoutePoint>* RouteAnnounce::mutable_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fc.RouteAnnounce.points)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_points();
}
inline const ::fc::RoutePoint& RouteAnnounce::points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fc.RouteAnnounce.points)
  return _internal_points().Get(index);
}
inline ::fc::RoutePoint* RouteAnnounce::add_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fc::RoutePoint* _add = _internal_mutable_points()->Add();
  // @@protoc_insertion_point(field_add:fc.RouteAnnounce.points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fc::RoutePoint>& RouteAnnounce::points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fc.RouteAnnounce.points)
  return _internal_points();
}
inline const ::google::protobuf::RepeatedPtrField<::fc::RoutePoint>&
RouteAnnounce::_internal_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedPtrField<::fc::RoutePoint>*
RouteAnnounce::_internal_mutable_points() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.points_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace fc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::fc::RouteAnnounce_RouteType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fc::RouteAnnounce_RouteType>() {
  return ::fc::RouteAnnounce_RouteType_descriptor();
}
template <>
struct is_proto_enum<::fc::RouteType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fc::RouteType>() {
  return ::fc::RouteType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // FC_5fRoute_5fMessage_2eproto_2epb_2eh
